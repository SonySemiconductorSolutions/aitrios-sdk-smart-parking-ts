.. _installation:

Installation and setup
======================

Smart Parking runs on an Edge AI device and a PC running Windows 10 with Docker Desktop or GitHub Codespaces. Please see :ref:`reqs`.

 .. note::

   An offline mode is provided to demonstrate the tool without an Internet connection or Edge AI device. Please see :ref:`offline`.

.. _installvis:

Edge AI device setup
--------------------

The documentation provided with the Edge AI device provides the information you need for the initial sensor configuration.

Please refer to the Device Setup Guide for information about setting up the device and connecting to Console.

For more information about training the system, please see Please see :ref:`training`.

.. _assembly:

Assembling the Edge AI device fixture
-------------------------------------

#. Attach the 1/4"-20 thread adapter (1) to the mounting screw on the tripod.

#. Screw the clamp (2) into the thread adapter.

     .. image:: images/tripod.png
      :width: 300

#. Attach the Edge AI device (3) to the clamp as shown below. 

   Note the connection of the LAN port.

    .. image:: images/camera_top.jpg
     :width: 200

.. _sensorposition:

Positioning the sensor
----------------------

#. Start Smart Parking. For more information, see :ref:`starttool`.

#. Print a copy of the parking lot PDF and place near the base of the tripod.

   .. note::

    Two parking lot images are provided in the Smart Parking SDK repository from GitHub. You can print `SmartParking-LotClean.pdf` or `SmartParking-LotRealistic.pdf`.

#. Position the 1:64 scale toy cars on the printed parking lot.

   .. image:: images/lot_setup.jpg
    :width: 300

#. Raise the tripod and adjust the angle of the clamp so the Edge AI device is aimed at the parking area as shown:

   .. image:: images/TripodV3Board.jpg
    :width: 300

Installing the Smart Parking application
----------------------------------------

The Smart Parking application can be run from GitHub Codespaces, a Docker image, as local front and backend instances, or in a cloud deployment.

Using Codespaces
~~~~~~~~~~~~~~~~

#. Go to the Smart Parking SDK repository in GitHub.

#. Start Codespaces and wait until ``postCreateCommand`` finishes.

#. Type the following command to stop the node process:

   .. code::

      kill $(lsof -t -sTCP:LISTEN -i:8080)

#. Edit ``server/.env``. For more information, see :ref:`environment`.

#. Navigate to ``/server``.

#. Type the following command:

   .. code-block::
      
    npm start

#. Open the forwarded port (default 8080).

   .. note::

      If you need to configure port forwarding, use the Ports section of the Command panel (next to Terminal). After configuring port forwarding, you should be able to click the displayed URL to start the application.

Creating and running a Docker image
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Install Docker on the host machine.

#. Clone the Smart Parking SDK repository from GitHub.

#. Edit ``server/.env``. For more information, see :ref:`environment`.

#. Run the following command in the directory where the Dockerfile is stored to build the Docker image:

   .. code-block::

    docker build -t <imagename>:<tag> .

   .. note::

    Please be sure to include the closing period in the preceding command.
    
#. Run the following command to start the Docker image:

   .. code-block::

    docker run -p 5000:8080 <imagename>:<tag>

Running local front and backend instances
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Install `Node.js <https://nodejs.org/en/download/>`_ and npm prerequisites.

   .. note::

     Smart Parking was developed using Node v17.9.0.
   
#. Clone the Smart Parking SDK repository from GitHub.

#. Navigate to the root project folder and then type the following commands:

   .. code-block::
   
    cd server
    
    git submodule update --init --recursive
    
    cd ..

#. Edit ``server/.env``. For more information, see :ref:`environment`.

#. Navigate to the root project folder and run the following command:

   .. code-block::

    npm run install-dependencies

#. Run the following command:

   .. code-block::

     npm run build-start

Hosting in a cloud service (optional)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

You can optionally deploy Docker instances of the entire application (back- and frontend) via a service such as the Azure App Service.

Microsoft offers a deployment tutorial: `https://docs.microsoft.com/en-us/azure/app-service/tutorial-custom-container?pivots=container-linux <https://docs.microsoft.com/en-us/azure/app-service/tutorial-custom-container?pivots=container-linux>`_.
	
Please note the following issues regarding using the Docker service directly within the Azure Cloud Shell:

		- You will need some way of getting the source code for ``Smart Parking Tool`` into the Azure Cloud Shell environment.

		- ``git clone`` should work if you have access to its GitHub repository.

		- Alternatively, you can transfer local files to the Cloud Shell via ``Azure Files``: `https://docs.microsoft.com/en-us/azure/cloud-shell/persisting-shell-storage <https://docs.microsoft.com/en-us/azure/cloud-shell/persisting-shell-storage>`_.
	
  Using the following Azure Cloud Shell command instead of directly using Docker (within the Cloud Shell, not locally) to both build and push the image seems to be more reliable:
	
    .. code-block::
      
      	az acr build --image <image-name:tag> --registry <your_container_registry_name> --file Dockerfile
	
  The rest of the commands involve configuring an ``Azure AppService`` plan and webapp to deploy.

.. _environment:

Editing environment settings
----------------------------

An environment file is provided in ``/server/.env``:

Please coordinate with your IT adminitrator or AITRIOS representative for the appropriate values for your deployment.

- ``CONSOLE_BASE_URL``

- ``CONSOLE_TOKEN_URL``

- ``CONSOLE_CLIENT_SECRET``

- ``CONSOLE_CLIENT_ID``

- ``SMART_PARKING_DETECTION_THRESHOLD``

- ``SMART_PARKING_OVERLAP_THRESHOLD``

- ``SMART_PARKING_DEFAULT_FEED_SIZE``

- ``SMART_PARKING_CAMERA_RESOLUTION``


In ``/web/.env``, the ``REACT_APP_API_HOST`` setting contains the server's network address. If the value is empty, it assumes the API host runs locally to the UI.

Changes to the .env file will be reflected after you restart the application.

Examples
~~~~~~~~

- If you're using your own training images and your own model, you'll need to set the ``ModelId`` parameter of your Command Parameter File?. A sample of this file is available at  ``<project_root>/SmartParking_StartUploadInferenceData.json``.

- If you want to change the communications port, please set the ``SMART_PARKING_INTERNAL_PORT`` parameter.

.. _imx500:

Console for AITRIOS
-------------------

For information about configuring and using the Console for AITRIOS, please refer to the supplied documentation.

Console tasks
~~~~~~~~~~~~~

#. Create a Config in **Deploy Device** with the intended Model for Smart Parking and deploy it to the Edge AI device.

#. In the **Application** section of **Deploy Device**, deploy the ``ppl_objectdetectionssd`` PPL application to the Edge AI device.

#. Upload an appropriate Command Parameter File (Settings > Command Parameter > Import) and bind it to the Edge AI device in **Manage Device**. We provide a sample starting point for such a file in the root of the project repository: ``SmartParking_StartUploadInferenceData.json``.

