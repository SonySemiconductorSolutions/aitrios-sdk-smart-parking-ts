"use strict";
/*
 * Copyright 2023 Sony Semiconductor Solutions Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectDetectionTop = void 0;
var flatbuffers = require("flatbuffers");
var object_detection_data_1 = require("./object-detection-data");
var ObjectDetectionTop = /** @class */ (function () {
    function ObjectDetectionTop() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ObjectDetectionTop.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ObjectDetectionTop.getRootAsObjectDetectionTop = function (bb, obj) {
        return (obj || new ObjectDetectionTop()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ObjectDetectionTop.getSizePrefixedRootAsObjectDetectionTop = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ObjectDetectionTop()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ObjectDetectionTop.prototype.perception = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new object_detection_data_1.ObjectDetectionData()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    ObjectDetectionTop.startObjectDetectionTop = function (builder) {
        builder.startObject(1);
    };
    ObjectDetectionTop.addPerception = function (builder, perceptionOffset) {
        builder.addFieldOffset(0, perceptionOffset, 0);
    };
    ObjectDetectionTop.endObjectDetectionTop = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ObjectDetectionTop.finishObjectDetectionTopBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    ObjectDetectionTop.finishSizePrefixedObjectDetectionTopBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    ObjectDetectionTop.createObjectDetectionTop = function (builder, perceptionOffset) {
        ObjectDetectionTop.startObjectDetectionTop(builder);
        ObjectDetectionTop.addPerception(builder, perceptionOffset);
        return ObjectDetectionTop.endObjectDetectionTop(builder);
    };
    return ObjectDetectionTop;
}());
exports.ObjectDetectionTop = ObjectDetectionTop;
